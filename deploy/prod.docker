#########################################################################
# Stage 1: Build client
FROM node:10-alpine as client-builder

## Install build toolchain, install node deps and compile native add-ons
RUN apk add --no-cache --virtual .gyp python make g++

RUN mkdir -p /opt/src

WORKDIR /opt/src
COPY ./client /opt/src
RUN npm install

RUN npm run build

#########################################################################
# Stage 2: Build server
FROM node:10-alpine as server-builder

## Install build toolchain, install node deps and compile native add-ons
RUN apk add --no-cache --virtual .gyp python make g++

RUN mkdir -p /opt/src

WORKDIR /opt/src
COPY ./server /opt/src

ENV NODE_ENV production
RUN npm install

# Since we're using ts-node to run the code, there's no need to transpile

#########################################################################
# Stage 3: Transfer only the runtime files to a small image
FROM node:10-alpine

RUN apk add --no-cache --virtual postgresql-client

RUN mkdir -p /opt/client
RUN mkdir -p /opt/server

COPY --from=client-builder /opt/src/build /opt/client
COPY --from=server-builder /opt/src /opt/server

WORKDIR /opt/server

COPY ./util/wait-for-it.sh /opt/server/util/
RUN chmod u+x ./util/wait-for-it.sh

ENV NODE_ENV production
ENV TS_NODE_TRANSPILE_ONLY true

EXPOSE 4000
CMD ["npm", "run", "start:prod"]
